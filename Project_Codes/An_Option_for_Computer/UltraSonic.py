# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UltraSonic.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTime, QTimer
import serial, sys
import serial.tools.list_ports
import numpy as np

class serialThreadClass(QtCore.QThread):  # Seri Porttan veri okuma işlemi için QThread Kullanıldı.

    message = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):

        super(serialThreadClass, self).__init__(parent)
        self.serialPort = serial.Serial()
        self.stopflag = False

    def stop(self):
        self.stopflag = True

    def run(self):
        while True:
            if self.stopflag:
                self.stopflag = False
                break
            elif self.serialPort.isOpen():
                try:
                    self.data = self.serialPort.readline()
                    #print(type(self.data.decode()))

                except:
                    print("ERROR\n")
                self.message.emit(str(self.data.decode()))

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(565, 530)
        MainWindow.setMinimumSize(QtCore.QSize(565, 530))
        MainWindow.setMaximumSize(QtCore.QSize(565, 530))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # comboBox_port ->> port
        self.comboBox_port = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_port.setGeometry(QtCore.QRect(110, 50, 141, 22))
        self.comboBox_port.setObjectName("comboBox_port")
        self.ports = serial.tools.list_ports.comports()
        for i in self.ports:
            self.comboBox_port.addItem(str(i))

        # comboBox_BaudRate
        self.comboBox_BaudRate = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_BaudRate.setGeometry(QtCore.QRect(110, 90, 141, 22))
        self.comboBox_BaudRate.setObjectName("comboBox_BaudRate")
        baud = ["300", "1200", "2400", "4800", "9600", "19200", "38400", "57600", "74880", "115200", "230400", "250000",
                "500000", "1000000", "2000000"]
        for i in baud:
            self.comboBox_BaudRate.addItem(i)
        self.comboBox_BaudRate.setCurrentText(baud[4])

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(60, 220, 201, 111))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.temperature_1 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.temperature_1.setObjectName("temperature_1")
        self.verticalLayout.addWidget(self.temperature_1)
        self.temperature_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.temperature_2.setObjectName("temperature_2")
        self.verticalLayout.addWidget(self.temperature_2)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(270, 220, 141, 111))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.lcd_temperature_1 = QtWidgets.QLCDNumber(self.verticalLayoutWidget_2)
        self.lcd_temperature_1.setLineWidth(0)
        self.lcd_temperature_1.setObjectName("lcd_temperature_1")
        self.lcd_temperature_1.display("-----")
        self.verticalLayout_2.addWidget(self.lcd_temperature_1)

        self.lcd_temperature_2 = QtWidgets.QLCDNumber(self.verticalLayoutWidget_2)
        self.lcd_temperature_2.setLineWidth(0)
        self.lcd_temperature_2.setObjectName("lcd_temperature_2")
        self.lcd_temperature_2.display("-----")
        self.verticalLayout_2.addWidget(self.lcd_temperature_2)

        self.port = QtWidgets.QLabel(self.centralwidget)
        self.port.setGeometry(QtCore.QRect(30, 50, 81, 21))
        self.port.setObjectName("port")
        self.BaudRate = QtWidgets.QLabel(self.centralwidget)
        self.BaudRate.setGeometry(QtCore.QRect(30, 80, 81, 41))
        self.BaudRate.setObjectName("BaudRate")
        self.connect = QtWidgets.QPushButton(self.centralwidget)
        self.connect.setGeometry(QtCore.QRect(40, 130, 93, 28))
        self.connect.setObjectName("connect")
        self.disconnect = QtWidgets.QPushButton(self.centralwidget)
        self.disconnect.setGeometry(QtCore.QRect(150, 130, 93, 28))
        self.disconnect.setObjectName("disconnect")
        self.threshold_set = QtWidgets.QLabel(self.centralwidget)
        self.threshold_set.setGeometry(QtCore.QRect(320, 90, 131, 31))
        self.threshold_set.setObjectName("threshold_set")
        self.start = QtWidgets.QPushButton(self.centralwidget)
        self.start.setGeometry(QtCore.QRect(170, 430, 93, 28))
        self.start.setObjectName("start")
        self.stop = QtWidgets.QPushButton(self.centralwidget)
        self.stop.setGeometry(QtCore.QRect(270, 430, 93, 28))
        self.stop.setObjectName("stop")
        self.timer_set = QtWidgets.QLabel(self.centralwidget)
        self.timer_set.setGeometry(QtCore.QRect(330, 30, 81, 21))
        self.timer_set.setObjectName("timer_set")
        self.temperature_state_1 = QtWidgets.QLabel(self.centralwidget)
        self.temperature_state_1.setGeometry(QtCore.QRect(470, 240, 81, 16))
        self.temperature_state_1.setText("")
        self.temperature_state_1.setObjectName("temperature_state_1")
        self.temperature_state_2 = QtWidgets.QLabel(self.centralwidget)
        self.temperature_state_2.setGeometry(QtCore.QRect(470, 290, 81, 16))
        self.temperature_state_2.setText("")
        self.temperature_state_2.setObjectName("temperature_state_2")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(300, 120, 160, 80))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.radioButton_70 = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.radioButton_70.setObjectName("radioButton_70")
        self.gridLayout.addWidget(self.radioButton_70, 0, 2, 1, 1)
        self.radioButton_80 = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.radioButton_80.setObjectName("radioButton_80")
        self.gridLayout.addWidget(self.radioButton_80, 1, 0, 1, 1)
        self.radioButton_100 = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.radioButton_100.setObjectName("radioButton_100")
        self.gridLayout.addWidget(self.radioButton_100, 1, 2, 1, 1)
        self.radioButton_90 = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.radioButton_90.setObjectName("radioButton_90")
        self.gridLayout.addWidget(self.radioButton_90, 1, 1, 1, 1)
        self.radioButton_50 = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.radioButton_50.setObjectName("radioButton_50")
        self.gridLayout.addWidget(self.radioButton_50, 0, 0, 1, 1)
        self.radioButton_60 = QtWidgets.QRadioButton(self.gridLayoutWidget)
        self.radioButton_60.setObjectName("radioButton_60")
        self.gridLayout.addWidget(self.radioButton_60, 0, 1, 1, 1)
        self.general_state = QtWidgets.QLabel(self.centralwidget)
        self.general_state.setGeometry(QtCore.QRect(360, 380, 181, 16))
        self.general_state.setObjectName("general_state")
        self.general_state.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(420, 220, 41, 51))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(420, 280, 41, 51))
        self.label_12.setObjectName("label_12")

        # port_state
        self.port_state = QtWidgets.QLabel(self.centralwidget)
        self.port_state.setGeometry(QtCore.QRect(60, 170, 200, 21))
        self.port_state.setText("<font color=red>COM port is not connected.</font>")
        self.port_state.setObjectName("port_state")

        self.spin_min = QtWidgets.QSpinBox(self.centralwidget)
        self.spin_min.setGeometry(QtCore.QRect(320, 60, 42, 22))
        self.spin_min.setSuffix("")
        self.spin_min.setMaximum(500)
        self.spin_min.setObjectName("spin_min")
        self.spin_sec = QtWidgets.QSpinBox(self.centralwidget)
        self.spin_sec.setGeometry(QtCore.QRect(400, 60, 42, 22))
        self.spin_sec.setMaximum(59)
        self.spin_sec.setObjectName("spin_sec")
        self.label_min = QtWidgets.QLabel(self.centralwidget)
        self.label_min.setGeometry(QtCore.QRect(288, 61, 31, 20))
        self.label_min.setObjectName("label_min")
        self.label_sec = QtWidgets.QLabel(self.centralwidget)
        self.label_sec.setGeometry(QtCore.QRect(369, 62, 31, 16))
        self.label_sec.setObjectName("label_sec")
        self.Timer = QtWidgets.QLabel(self.centralwidget)
        self.Timer.setGeometry(QtCore.QRect(110, 360, 67, 49))
        self.Timer.setObjectName("Timer")
        self.lcd_timer_min = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcd_timer_min.setGeometry(QtCore.QRect(190, 360, 81, 49))
        self.lcd_timer_min.setLineWidth(0)
        self.lcd_timer_min.setSmallDecimalPoint(False)
        self.lcd_timer_min.setDigitCount(3)
        self.lcd_timer_min.setObjectName("lcd_timer_min")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(260, 360, 41, 49))
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.lcd_timer_sec = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcd_timer_sec.setGeometry(QtCore.QRect(270, 360, 81, 49))
        self.lcd_timer_sec.setLineWidth(0)
        self.lcd_timer_sec.setSmallDecimalPoint(False)
        self.lcd_timer_sec.setDigitCount(2)
        self.lcd_timer_sec.setObjectName("lcd_timer_sec")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 565, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        #self.spin_sec.valueChanged['int'].connect(self.lcd_timer_sec.display)  # type: ignore
        #self.spin_min.valueChanged['int'].connect(self.lcd_timer_min.display)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.timer_hold = False
        self.coolDown_1 = False
        self.coolDown_2 = False
        self.threshold_value = float(0.00)
        self.mySerial = serialThreadClass()
        self.connect.clicked.connect(self.serialConnect)
        self.disconnect.clicked.connect(self.serialDisconnect)
        self.start.clicked.connect(lambda: self.button_functions(self.start))
        self.stop.clicked.connect(lambda: self.button_functions(self.stop))
        self.radioButton_50.toggled.connect(lambda: self.radioButtons(self.radioButton_50))
        self.radioButton_60.toggled.connect(lambda: self.radioButtons(self.radioButton_60))
        self.radioButton_70.toggled.connect(lambda: self.radioButtons(self.radioButton_70))
        self.radioButton_80.toggled.connect(lambda: self.radioButtons(self.radioButton_80))
        self.radioButton_90.toggled.connect(lambda: self.radioButtons(self.radioButton_90))
        self.radioButton_100.toggled.connect(lambda: self.radioButtons(self.radioButton_100))
        self.spin_sec.valueChanged.connect(lambda: self.Enable_start())
        self.spin_min.valueChanged.connect(lambda: self.Enable_start())

        self.start.setEnabled(False)
        self.stop.setEnabled(False)
        self.disconnect.setEnabled(False)
        self.spin_min.setEnabled(False)
        self.spin_sec.setEnabled(False)
        self.button_states_all = False
        self.radioButton_50.setAutoExclusive(True)
        self.radioButton_60.setAutoExclusive(True)
        self.radioButton_70.setAutoExclusive(True)
        self.radioButton_80.setAutoExclusive(True)
        self.radioButton_90.setAutoExclusive(True)
        self.radioButton_100.setAutoExclusive(True)
        self.radioButton_50.setEnabled(False)
        self.radioButton_60.setEnabled(False)
        self.radioButton_70.setEnabled(False)
        self.radioButton_80.setEnabled(False)
        self.radioButton_90.setEnabled(False)
        self.radioButton_100.setEnabled(False)



    def Enable_start(self):
        if self.spin_sec.value() != 0 or self.spin_min.value() != 0:
            if self.button_states_all == True:
                self.start.setEnabled(True)


    def serialConnect(self):
        if self.comboBox_port.currentText() != '':
            self.portText = self.comboBox_port.currentText()
            self.port = self.portText.split()
            self.baudrate = self.comboBox_BaudRate.currentText()
            self.mySerial.serialPort.baudrate = int(self.baudrate)
            self.mySerial.serialPort.port = self.port[0]

        try:
            self.mySerial.serialPort.open()

        except:
            self.port_state.setText("<font color=red>Select a port.</font>")

        if self.mySerial.serialPort.isOpen():
            self.port_state.setText('<font color=green>Connected</font>')
            self.general_state.setText("")
            self.connect.setEnabled(False)
            self.comboBox_port.setEnabled(False)
            self.comboBox_BaudRate.setEnabled(False)
            self.disconnect.setEnabled(True)
            self.spin_min.setEnabled(True)
            self.spin_sec.setEnabled(True)
            self.radioButton_50.setEnabled(True)
            self.radioButton_60.setEnabled(True)
            self.radioButton_70.setEnabled(True)
            self.radioButton_80.setEnabled(True)
            self.radioButton_90.setEnabled(True)
            self.radioButton_100.setEnabled(True)

    def serialDisconnect(self):
        if self.mySerial.serialPort.isOpen():
            self.mySerial.serialPort.close()
            if self.mySerial.serialPort.isOpen() == False:
                self.port_state.setText('<font color=red>Disconnected</font>')
                self.button_states_all = False
                self.connect.setEnabled(True)
                self.comboBox_port.setEnabled(True)
                self.comboBox_BaudRate.setEnabled(True)
                self.start.setEnabled(False)
                self.stop.setEnabled(False)
                self.disconnect.setEnabled(False)
                self.spin_min.setEnabled(False)
                self.spin_sec.setEnabled(False)
                self.radioButton_50.setEnabled(False)
                self.radioButton_60.setEnabled(False)
                self.radioButton_70.setEnabled(False)
                self.radioButton_80.setEnabled(False)
                self.radioButton_90.setEnabled(False)
                self.radioButton_100.setEnabled(False)
                self.radioButton_50.setAutoExclusive(False)
                self.radioButton_60.setAutoExclusive(False)
                self.radioButton_70.setAutoExclusive(False)
                self.radioButton_80.setAutoExclusive(False)
                self.radioButton_90.setAutoExclusive(False)
                self.radioButton_100.setAutoExclusive(False)
                self.radioButton_50.setChecked(False)
                self.radioButton_60.setChecked(False)
                self.radioButton_70.setChecked(False)
                self.radioButton_80.setChecked(False)
                self.radioButton_90.setChecked(False)
                self.radioButton_100.setChecked(False)
                self.radioButton_50.setAutoExclusive(True)
                self.radioButton_60.setAutoExclusive(True)
                self.radioButton_70.setAutoExclusive(True)
                self.radioButton_80.setAutoExclusive(True)
                self.radioButton_90.setAutoExclusive(True)
                self.radioButton_100.setAutoExclusive(True)
                self.spin_sec.setValue(0)
                self.spin_min.setValue(0)

    def button_functions(self, button):
        if button == self.stop:
            if self.mySerial.serialPort.isOpen():
                self.mySerial.serialPort.write("s".encode())
                self.button_states_all = False
                self.lcd_temperature_1.display("-----")
                self.lcd_temperature_2.display("-----")
                self.temperature_state_1.setText(" ")
                self.temperature_state_2.setText(" ")
                self.timer.stop()
                self.stop.setEnabled(False)
                self.disconnect.setEnabled(True)
                self.spin_min.setEnabled(True)
                self.spin_sec.setEnabled(True)
                self.radioButton_50.setEnabled(True)
                self.radioButton_60.setEnabled(True)
                self.radioButton_70.setEnabled(True)
                self.radioButton_80.setEnabled(True)
                self.radioButton_90.setEnabled(True)
                self.radioButton_100.setEnabled(True)
                self.radioButton_50.setAutoExclusive(False)
                self.radioButton_60.setAutoExclusive(False)
                self.radioButton_70.setAutoExclusive(False)
                self.radioButton_80.setAutoExclusive(False)
                self.radioButton_90.setAutoExclusive(False)
                self.radioButton_100.setAutoExclusive(False)
                self.radioButton_50.setChecked(False)
                self.radioButton_60.setChecked(False)
                self.radioButton_70.setChecked(False)
                self.radioButton_80.setChecked(False)
                self.radioButton_90.setChecked(False)
                self.radioButton_100.setChecked(False)
                self.radioButton_50.setAutoExclusive(True)
                self.radioButton_60.setAutoExclusive(True)
                self.radioButton_70.setAutoExclusive(True)
                self.radioButton_80.setAutoExclusive(True)
                self.radioButton_90.setAutoExclusive(True)
                self.radioButton_100.setAutoExclusive(True)
                self.start.setEnabled(False)
                self.general_state.setText("<font color=red>The program is Off.</font>")


        elif button == self.start:
            if self.mySerial.serialPort.isOpen():
                self.mySerial.serialPort.write("o".encode())
                self.stop.setEnabled(True)
                self.start.setEnabled(False)
                self.disconnect.setEnabled(False)
                self.spin_min.setEnabled(False)
                self.spin_sec.setEnabled(False)
                self.radioButton_50.setEnabled(False)
                self.radioButton_60.setEnabled(False)
                self.radioButton_70.setEnabled(False)
                self.radioButton_80.setEnabled(False)
                self.radioButton_90.setEnabled(False)
                self.radioButton_100.setEnabled(False)
                self.general_state.setText("<font color=green>The program is On.</font>")

                self.lcd_timer_sec.display(self.spin_sec.value())
                self.lcd_timer_min.display(self.spin_min.value())
                self.timer = QtCore.QTimer()
                self.timer.timeout.connect(self.update_lcd_timer)
                self.timer.start(1000)

                self.mySerial.message.connect(self.messageTextEdit)
                self.mySerial.start()


    def radioButtons(self, button):
        if button == self.radioButton_50:
            if self.mySerial.serialPort.isOpen():
                self.mySerial.serialPort.write("1".encode())
                self.button_states_all = True
                self.threshold_value = float(50.00)

        elif button == self.radioButton_60:
            if self.mySerial.serialPort.isOpen():
                self.mySerial.serialPort.write("2".encode())
                self.button_states_all = True
                self.threshold_value = float(60.00)

        elif button == self.radioButton_70:
            if self.mySerial.serialPort.isOpen():
                self.mySerial.serialPort.write("3".encode())
                self.button_states_all = True
                self.threshold_value = float(70.00)

        elif button == self.radioButton_80:
            if self.mySerial.serialPort.isOpen():
                self.mySerial.serialPort.write("4".encode())
                self.button_states_all = True
                self.threshold_value = float(80.00)

        elif button == self.radioButton_90:
            if self.mySerial.serialPort.isOpen():
                self.mySerial.serialPort.write("5".encode())
                self.button_states_all = True
                self.threshold_value = float(90.00)

        elif button == self.radioButton_100:
            if self.mySerial.serialPort.isOpen():
                self.mySerial.serialPort.write("6".encode())
                self.button_states_all = True
                self.threshold_value = float(99.00)

        if self.spin_sec.value() != 0 or self.spin_min.value() != 0:
            if self.button_states_all == True:
                self.start.setEnabled(True)


    def update_lcd_timer(self):
        if self.timer_hold == False:
            current_value_sec = self.lcd_timer_sec.value()
            current_value_min = self.lcd_timer_min.value()
            if current_value_sec == 0:
                if current_value_min == 0:
                    self.button_functions(self.stop)
                    return
                else:
                    new_value_min = current_value_min - 1
                    self.lcd_timer_min.display(new_value_min)

                current_value_sec = 60
                new_value_sec = current_value_sec - 1
                self.lcd_timer_sec.display(new_value_sec)
            else:
                new_value_sec = current_value_sec - 1
                self.lcd_timer_sec.display(new_value_sec)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "UltraSonic"))
        self.temperature_1.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600; color:#1010ba;\">Temperature - 1</span></p></body></html>"))
        self.temperature_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600; color:#1e11b0;\">Temperature - 2</span></p></body></html>"))
        self.port.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Port</span></p></body></html>"))
        self.BaudRate.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Baud Rate</span></p></body></html>"))
        self.connect.setText(_translate("MainWindow", "Connect"))
        self.disconnect.setText(_translate("MainWindow", "Disconnect"))
        self.threshold_set.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">Threshold Set:</span></p></body></html>"))
        self.start.setText(_translate("MainWindow", "Start"))
        self.stop.setText(_translate("MainWindow", "Stop"))
        self.timer_set.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">Timer Set:</span></p></body></html>"))
        self.radioButton_70.setText(_translate("MainWindow", "70"))
        self.radioButton_80.setText(_translate("MainWindow", "80"))
        self.radioButton_100.setText(_translate("MainWindow", "100"))
        self.radioButton_90.setText(_translate("MainWindow", "90"))
        self.radioButton_50.setText(_translate("MainWindow", "50"))
        self.radioButton_60.setText(_translate("MainWindow", "60"))
        self.label_11.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">°C</span></p></body></html>"))
        self.label_12.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">°C</span></p></body></html>"))
        self.label_min.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">Min</span></p></body></html>"))
        self.label_sec.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; font-weight:600;\">Sec</span></p></body></html>"))
        self.Timer.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600; color:#d30000;\">Timer</span></p></body></html>"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:600;\">:</span></p></body></html>"))

    def messageTextEdit(self):
        self.incoming_message = str(self.mySerial.data.decode())
        data = self.incoming_message.strip()
        data = data.split(",")
        if type(data) == list:
            if len(data) == 2:
                first_data = data[0]
                second_data = data[1]
                self.lcd_temperature_1.display(first_data)
                self.lcd_temperature_2.display(second_data)
                if float(first_data) >= self.threshold_value:
                    self.coolDown_1 = True
                    self.temperature_state_1.setText("<font color=green>Cooling Down</font>")
                elif float(first_data) <= self.threshold_value - float(5.00):
                    self.coolDown_1 = False
                    self.temperature_state_1.setText(" ")
                if float(second_data) >= self.threshold_value:
                    self.coolDown_2 = True
                    self.temperature_state_2.setText("<font color=green>Cooling Down</font>")
                elif float(second_data) <= self.threshold_value - float(5.00):
                    self.coolDown_2 = False
                    self.temperature_state_2.setText(" ")
                if self.coolDown_1 == True and self.coolDown_2 == True:
                    self.timer_hold = True
                    self.general_state.setText("<font color=red>The program is OFF for a while.</font>")
                elif self.coolDown_1 == False or self.coolDown_2 == False:
                    self.timer_hold = False
                    self.general_state.setText("<font color=green>The program is On.</font>")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
